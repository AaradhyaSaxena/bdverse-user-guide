[
["index.html", "bdverse: User Guide", " bdverse: User Guide The bdverse team 2019-09-09 The bdverse: a family of R packages for biodiversity data –&gt; To replace image when new graphics are ready &lt;– This book is a living document. You can view updates about this user guide in the release notes. This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License. Published with bookdown "],
["what-is-the-bdverse.html", "What is the bdverse", " What is the bdverse [To add fig.] The bdverse is a family of R packages for biodiversity data. We build it to serve as a sustainable and agile infrastructure that enhances the value of biodiversity data by allowing users to conveniently employ R, for data exploration, quality assessment, data cleaning, and standardization. The bdverse supports users with and without programming capabilities. bdDwC provides an interactive Shiny app and a set of functions for standardizing field names in compliance with Darwin Core (DwC) format, see bdDwC section. bdchecks is an infrastructure for performing, filtering, creating and managing various biodiversity data checks, see bdchecks section. bdclean is a user-friendly data cleaning Shiny app for the inexperienced R user. It provides features to manage complete workflows for biodiversity data cleaning, from collecting user input in order to adjust cleaning procedures to generating various reports and versions of the data, see bdclean section. We hope that you’ll find the guide useful and clear, and welcome your suggestions in the issue tracker of the user guide. Fundings [To add: Technion’s Blumenstein Fund] "],
["start.html", "Chapter 1 Getting started 1.1 Installing the bdverse 1.2 App launcher 1.3 Binder 1.4 Docker 1.5 Possible installation problems &amp; solutions", " Chapter 1 Getting started 1.1 Installing the bdverse install.packages(&quot;remotes&quot;) remotes::install_github(&quot;bd-R/bdverse&quot;) 1.1.1 Soon: a stable version from CRAN install.packages(&quot;bdverse&quot;) 1.2 App launcher bdverse::bd_launcher() Figure 1.1: Shiny apps launcher 1.3 Binder [To try holepunch] 1.4 Docker What is Docke? [TBA] 1.4.1 Docke guide [To link rOpenSci guide] Play with Docker [TBA] bdverse Docker images [TBA] 1.5 Possible installation problems &amp; solutions [ TBA ] "],
["bddwc.html", "Chapter 2 bddwc 2.1 bddwc &amp; Darwin Core 2.2 Shiny app 2.3 Dictionaries 2.4 Darwinizing your dataset 2.5 Command line operations 2.6 Load package 2.7 Darwinizing a dataset 2.8 Updating the Darwin Cloud dictionary 2.9 A case study", " Chapter 2 bddwc 2.1 bddwc &amp; Darwin Core bdDwC is a R package that supplies an interactive Shiny app and a set of functions for standardizing field names in compliance to the Darwin Core (DwC) format. bdDwC is a key element in the bdverse– a collection of tools, that form a general framework for facilitating biodiversity science in R. –&gt; To replace with new bddwc overview &lt;– What is the Darwin Core standard? Darwin Core (DwC) is a global standard for publishing biodiversity data, whose goal is to facilitate the sharing of biodiversity information, by providing identifiers, labels, and definitions (Wieczorek et al. 2012). DwC was established as an evolving community-developed standard, by the Biodiversity Information Standards Working Group (www.tdwg.org). DwC is a library of definitions of common biodiversity data terms, each of which represents a field within the database. There are around 200 such fields (not including DwC extensions); a full set of the DwC terms with their descriptions is available in the Quick Reference Guide (http://rs.tdwg.org/dwc/terms). For more information see Learn more section. Why it’s important to “Darwinize” a dataset Running the Darwinizer enables you to standardize many field names in your dataset – and that allows the bdverse to handle data from various biodiversity portals seamlessly, and lets you enjoy all of bdvers features, regardless of publishers variation in field names. 2.2 Shiny app 2.2.1 Launching the app library(bdDwC) # Laod package library runDwC() # Launch the app 2.2.2 App overview –&gt; To replace with the new app &lt;– In the first screen, you’ll need to load your biodiversity data; choose dictionary and run the Darwinizer. There are two options, form a file on your computer, of fetch from a web based data provider. 2.2.3 Data upload 2.2.3.1 From a local file A CSV file or a Darwin Core Archive (DwC-A) zip file can be uploaded. –&gt; To replace with the new app &lt;– 2.2.4 From an online database Also, data can be retrieved directly from various online biodiversity databases. You need only to: Select the database Specify the desired scientific name. Specify the number of records (upper limit of 50,000). Check the box if records must have coordinates. Wait for data to be downloaded. –&gt; To replace with the new app &lt;– 2.3 Dictionaries A dictionary is a key component when Darwinizing a dataset. It’s basically a lookup table that lists a possible variation of field name and it corresponding DwC name. 2.3.1 The Darwin Cloud dictionary The Darwin Cloud dictionary (Wieczorek et al. 2017), is a lookup table that accumulates different variations in DwC field names from different publishers. This valuable and critical dictionary was created and is maintained by the Kurator project (http://kurator.acis.ufl.edu/kurator-web/), which provides workflow tools for data quality improvement of biodiversity data, via a user-friendly web interface. The development of bdDwC was inspired by Kurator’s own Darwinizer. Updating the Darwin Cloud dictionary It’s recommended to update the Darwin Cloud dictionary file. This can be done easily by clicking the Update DC button. –&gt; To replace with the new app &lt;– 2.3.2 Custom dictionary It’s also possible to add your own dictionary by creating a CSV file with two columns, one for the Field Names and one for the Standard Names. After uploading the custom disctionary, we need to specify which field denotes the ‘User fierld names’ and which is the ‘Standard (DwC) field names’. –&gt; To replace with the new app &lt;– 2.4 Darwinizing your dataset Once a dataset is uploaded, the ‘Submit to Darwinizer’ button is activated, Clicking it will begin the interactive ‘Darwinize the dataset’ process. –&gt; To replace with the new app &lt;– 2.4.1 Darwinizer results Results page overwiew –&gt; To replace with the new app &lt;– Manually renaming field names can be done very easily, just choose the two corresponding fields and click the Rename button. Manually renaming fields –&gt; To replace with the new app &lt;– Hovering over a DwC standard name will display its description. 2.4.2 Download your Darwinized data 2.4.3 Closing the app Just close the app browser tab, and the R session will be terminated. To reopen it run in the R Console runDwC(). 2.5 Command line operations –&gt; To synchronize functions with the new version!!!! &lt;– 2.6 Load package Load the bdDwC package library(bdDwC) 2.7 Darwinizing a dataset bdDwC contains Indian Reptile dataset bdDwC:::dataReptiles. The function to Darwinize a dataset isdarwinizeNames (replace bdDwC:::dataReptiles with wanted dataset): result &lt;- darwinizeNames(dataUser = bdDwC:::dataReptiles, dataDWC = bdDwC:::dataDarwinCloud$data) You can replace bdDwC:::dataReptiles with your dataset Rename your dataset field names to Darwinized names using renameUserData: renameUserData(bdDwC:::dataReptiles, result) 2.8 Updating the Darwin Cloud dictionary To get newest version of Darwin Cloud Data run: downloadCloudData() which will download data from the remote repository and extract field and standard names. 2.9 A case study Case study title [ TBA ] References "],
["bdchecks.html", "Chapter 3 bdchecks 3.1 What is bdchecks 3.2 Shiny app 3.3 Command line operations 3.4 Load package 3.5 Perform data checks 3.6 Review performed checks 3.7 Data checks infrastructure", " Chapter 3 bdchecks 3.1 What is bdchecks bdchecks supplies a Shiny app and a set of functions to perform and manage various data checks for biodiversity data. –&gt; To replace with new bdchecks overview &lt;– What are biodiversity data checks? Data checks can include format checks, completeness checks, reasonableness checks, limit checks, etc. These processes usually result in flagging, documenting, and subsequent correcting or eliminating of suspect records. The checks must be specifically tailored around the structure of the data at hand, in our case, the Darwin Core standard. Ideally, a data check needs to hold its functionality and relevant metadata. What bdchecks can do for you? bdchecks offers various features for various R users: Using the Shiny app inexperienced R users can easily perform all data check and can easily filter the data accordingly. See [The shiny app] section. Experienced R users can perform all data checks by utilizing few R functions form the command line or within an R script. See Command line operations section. Advanced R users can even edit, add and manage their own collection of data checks, quite easily so. See Data checks infrastructure section. 3.2 Shiny app 3.2.1 Data upload and download As inbddwc: data upload, data download. 3.2.2 Choose data checks –&gt; To replace with the new app &lt;– –&gt; To replace with the new app &lt;– 3.2.3 Checks results and data filtering Overwiew Results page overview –&gt; To replace with the new app &lt;– Filtering the data based on the results Choose specific results to filter out –&gt; To replace with the new app &lt;– Filter the data and download your filtered data –&gt; To replace with the new app &lt;– 3.2.4 Closing the app Just close the app browser tab, and the R session will be terminated. To reopen it run in the R Console runbdchecks(). 3.3 Command line operations –&gt; To synchronize functions with the new version!!!! &lt;– 3.4 Load package Load the bdchecks package library(bdchecks) 3.5 Perform data checks bdchecks contains a dataset on bats named dataBats. To perform all data checks use performDataCheck: resultDC &lt;- bdchecks::performDataCheck(bdchecks::dataBats) replace bdchecks::dataBats with your own dataset name. 3.6 Review performed checks See which data checks were performed: resultDC Review data checks result (% of records that passed, failed or have missing data) # Nice summary summary_DC(resultDC) 3.6.1 Filtering your data [ TBA ] 3.7 Data checks infrastructure [Write short explanation + give a link to the relevant section in the developer-guide] 3.7.1 Data checks YAML file [Move section to dev-guide; add Shiny management app; explain unit testing framework + synchronization system] The YMAL file holds the code and metadata of all data checks. The checks are derived from a core suite of tests and assertions being developed by TDWG’s Biodiversity Data Quality Task Group 2 ( Data Quality Tests and Assertions). More information and links can be found in the Learn more section. 3.7.2 Data check example DC_b23110e7-1be7-444a-a677-cdee0cf4330c: name: countryMismatch meta: Description: Main: Check if given country match given country code. InputQuestion: Does country and country code match? Example: Fail: Country name (dwc:country) and ISO country code (dwc:countryCode) do not match Pass: Country name (dwc:country) and ISO country code (dwc:countryCode) match InputFail: country=Australia, countryCode=4 InputPass: country=Australia, countryCode=AU OutputFail: Failed OutputPass: Passed Resolution: Record: SingleRecord Term: MultiTerm DarwinCoreClass: Location Keywords: location,iso,country guid: b23110e7-1be7-444a-a677-cdee0cf4330c Flags: Severity: Warning Warning: Inconsistent Output: Validation Dimension: Consistency Pseudocode: | get.Country($countryCode) == $country Source: Reference: CreatedBy: Povilas Gibas MaintainedBy: Povilas Gibas CreationDate: 2018-06-27 ModificationDate: 2018-06-27 ModificationHist: Input: Target: country,countryCode Dependency: DependencyType: Internal DataChecks: Rpackages: rgbif Data: isocodes$name,isocodes$code Functionality: | FUNC &lt;- function() { result &lt;- sapply(seq_along(TARGET1), function(i) { if (is.na(TARGET1[i]) | is.na(TARGET2[i])) { NA } else { which(DEPEND1 == TARGET1[i]) == which(DEPEND2 == TARGET2[i]) } }) result &lt;- unlist(result) return(result) } To replace with the new structure!!! 3.7.3 Manage your own data checks To encourage or not to encourage mmm… After adding/ removing/ editing the YAML file, you can load data checks into R using getDC() function. DC &lt;- getDC(&quot;path to your YAML file&quot;) You can also export data checks from your YAML file to .rda and roxygen2 comments. exportDC(&quot;path to your YAML file&quot;) "],
["bdclean.html", "Chapter 4 bdclean 4.1 What is bddwc 4.2 Shiny app", " Chapter 4 bdclean 4.1 What is bddwc 4.2 Shiny app "],
["learn.html", "Chapter 5 Learn more 5.1 Biodiversity data cleaning", " Chapter 5 Learn more 5.1 Biodiversity data cleaning Biodiversity Informatics Training Curriculum (BITC) BITC: Webinar Series Darwin Core Hour webinar series The Darwin Core Questions &amp; Answers wiki Principles of Data Quality (Chapman 2005) A conceptual framework for quality assessment and management of biodiversity data (Veiga et al. 2017) Quantifying the value of user-level data cleaning for big data: A case study using mammal distribution models (Gueta and Carmel 2016) References "],
["guidenews.html", "Chapter 6 Guide release notes 6.1 0.0.1", " Chapter 6 Guide release notes 6.1 0.0.1 YYYY-MM-DD, add details… YYYY-MM-DD, add details… "],
["references.html", "Chapter 7 References", " Chapter 7 References "]
]
